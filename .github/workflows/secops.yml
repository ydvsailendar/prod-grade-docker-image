name: Secure Docker Build and Push with SecOps Practices

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SLACK_WEBHOOK_URL_GITHUB: ${{ secrets.SLACK_WEBHOOK_URL_GITHUB }}
  BASE_IMAGE: alpine:latest

jobs:
  security-checks:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- SAST: Static Application Security Testing (CodeQL) ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.28.11
        with:
          languages: python

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3.28.11

      # --- SCA: Software Composition Analysis (Dependency Scanning) ---
      - name: Scan Dependencies for Vulnerabilities (Trivy SCA)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: fs
          exit-code: 1
          severity: HIGH,CRITICAL

      # --- Scan for hardcoded secrets (GitLeaks) ---
      - name: Scan for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Lint Dockerfile (Hadolint) ---
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
          override-warning: DL3013

      # --- Generate SBOM (Syft) ---
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: "spdx-json"
          output-file: "sbom.spdx.json"

      # --- Scan Base Image for Vulnerabilities (Trivy) ---
      - name: Scan Base Image for Vulnerabilities (Trivy)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: image
          image-ref: ${{ env.BASE_IMAGE }}
          exit-code: 1
          severity: HIGH,CRITICAL

      # --- Notification for Failure ---
      - name: Send Slack notification on failure (GitHub Workflow channel)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data \
          "{\"text\":\":x: Security checks failed in CI/CD pipeline for ${{ env.GITHUB_REPOSITORY }} on branch ${{ github.ref }}\"}" \
          ${{ env.SLACK_WEBHOOK_URL_GITHUB }}
          exit 1

  build-and-push:
    runs-on: ubuntu-latest
    needs: security-checks
    if: success()

    permissions:
      contents: write
      packages: write
      security-events: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Extract First 8 Characters of Commit SHA ---
      - name: Set COMMIT_TAG from commit SHA
        run: echo "COMMIT_TAG=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

      # --- Docker Build ---
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_TAG }} .

      # --- Post-Build Security Scans ---
      - name: Scan Docker Image for Vulnerabilities (Trivy)
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: image
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_TAG }}
          exit-code: 1
          severity: HIGH,CRITICAL

      # --- Install Cosign ---
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      # --- Image Signing ---
      - name: Sign Docker Image (Cosign)
        run: |
          cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_TAG }}

      # --- Push Image ---
      - name: Push Docker Image to GitHub Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.COMMIT_TAG }}

      # --- Notification for Success ---
      - name: Send Slack notification on success (GitHub Workflow channel)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data \
          "{\"text\":\":white_check_mark: Docker image built, scanned, signed, and pushed successfully for ${{ env.GITHUB_REPOSITORY }} on branch ${{ github.ref }}. Image is secure!\"}" \
          ${{ env.SLACK_WEBHOOK_URL_GITHUB }}

      - name: Send Slack notification on failure (GitHub Workflow channel)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data \
          "{\"text\":\":x: Security checks failed in CI/CD pipeline for ${{ env.GITHUB_REPOSITORY }} on branch ${{ github.ref }}\"}" \
          ${{ env.SLACK_WEBHOOK_URL_GITHUB }}
          exit 1
